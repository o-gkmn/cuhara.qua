swagger: "2.0"
info:
  title: HTTP Error Models
  version: 0.1.0
  description: Only HTTP error models retained
consumes:
  - application/json
produces:
  - application/json
paths:
  /api/v1/auth/login:
    post:
      tags:
        - auth
      summary: Login
      description: Login to the system
      parameters:
        - name: login
          in: body
          required: true
          schema:
            $ref: "#/definitions/loginRequest"
      responses:
        200:
          description: Login successful
          schema:
            $ref: "#/definitions/loginResponse"

  /api/v1/auth/register:
    post:
      tags:
        - auth
      summary: Register
      description: Register a new user
      parameters:
        - name: register
          in: body
          required: true
          schema:
            $ref: "#/definitions/registerRequest"
      responses:
        200:
          description: Register successful
          schema:
            $ref: "#/definitions/registerResponse"

  /api/v1/users:
    get:
      tags:
        - users
      summary: Get users
      description: Get all users
      responses:
        200:
          description: Users fetched successfully
          schema:
            $ref: "#/definitions/userResponse"

    put:
      tags:
        - users
      summary: Update user
      description: Update a user
      parameters:
        - name: updateUser
          in: body
          required: true
          schema:
            $ref: "#/definitions/updateUserRequest"
      responses:
        200:
          description: User updated successfully
          schema:
            $ref: "#/definitions/updateUserResponse"

  /api/v1/users/{id}:
    delete:
      tags:
        - users
      summary: Delete user
      description: Delete a user
      parameters:
        - $ref: "#/parameters/IDPathParam"
      responses:
        200:
          description: User deleted successfully
          schema:
            $ref: "#/definitions/deleteUserResponse"

  /api/v1/tenants:
    get:
      tags:
        - tenant
      summary: Get tenants
      description: Get all tenants
      responses:
        200:
          description: tenants fetched successfully
          schema:
            $ref: "#/definitions/tenantResponse"

    post:
      tags:
        - tenant
      summary: Create tenant
      description: Create a new tenant
      parameters:
        - name: createTenant
          in: body
          required: true
          schema:
            $ref: "#/definitions/createTenantRequest"
      responses:
        200:
          description: Tenant created successfully
          schema:
            $ref: "#/definitions/createTenantResponse"

  /api/v1/tenants/{id}:
    patch:
      tags:
        - tenant
      summary: Update tenant
      description: Update a tenant
      parameters:
        - $ref: "#/parameters/IDPathParam"
        - name: updateTenant
          in: body
          required: true
          schema:
            $ref: "#/definitions/updateTenantRequest"
      responses:
        200:
          description: Tenant updated successfully
          schema:
            $ref: "#/definitions/updateTenantResponse"

    delete:
      tags:
        - tenant
      summary: Delete tenant
      description: Delete a tenant
      parameters:
        - $ref: "#/parameters/IDPathParam"
      responses:
        200:
          description: Tenant deleted successfully
          schema:
            $ref: "#/definitions/deleteTenantResponse"

  /api/v1/roles:
    get:
      tags:
        - role
      summary: Get roles
      description: Get all roles
      responses:
        200:
          description: Roles fetched successfully
          schema:
            $ref: "#/definitions/roleResponse"

parameters:
  IDPathParam:
    name: id
    in: path
    description: User ID
    required: true
    type: integer

definitions:
  roleResponse:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      tenant:
        $ref: "#/definitions/tenantResponse"

  deleteTenantResponse:
    type: object
    properties:
      id:
        type: integer
        x-go-type: int

  updateTenantRequest:
    type: object
    properties:
      name:
        type: string

  updateTenantResponse:
    type: object
    properties:
      id:
        type: integer
        x-go-type: int

  createTenantRequest:
    type: object
    required:
      - name
    properties:
      name:
        type: string

  createTenantResponse:
    type: object
    properties:
      id:
        type: integer
        x-go-type: int

  tenantResponse:
    type: object
    properties:
      id:
        type: integer
        x-go-type: int
      name:
        type: string

  deleteUserRequest:
    type: integer
    x-go-type: int
  deleteUserResponse:
    type: object
    properties:
      id:
        type: integer
        x-go-type: int

  updateUserRequest:
    type: object
    required:
      - id
    properties:
      id:
        type: integer
        x-go-type: int
      name:
        type: string
      email:
        type: string
      vscAccount:
        type: string
      role:
        type: object
        required:
          - id
        properties:
          id:
            type: integer
            x-go-type: int

  updateUserResponse:
    type: object
    properties:
      id:
        type: integer
        x-go-type: int

  userResponse:
    type: object
    properties:
      id:
        type: integer
        x-go-type: int
      name:
        type: string
      email:
        type: string
      vscAccount:
        type: string

  loginRequest:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
      password:
        type: string

  loginResponse:
    type: object
    properties:
      token:
        type: string

  registerRequest:
    type: object
    required:
      - name
      - email
      - password
      - vscAccount
      - roleID
      - tenantID
    properties:
      name:
        type: string
      email:
        type: string
      password:
        type: string
      vscAccount:
        type: string
      roleID:
        type: integer
        x-go-type: int
      tenantID:
        type: integer
        x-go-type: int

  registerResponse:
    type: object
    properties:
      id:
        type: integer
        x-go-type: int

  httpValidationErrorDetail:
    type: object
    required:
      - key
      - in
      - error
    properties:
      error:
        description: Error describing field validation failure
        type: string
      in:
        description: Indicates how the invalid field was provided
        type: string
      key:
        description: Key of field failing validation
        type: string

  publicHttpError:
    type: object
    required:
      - status
      - type
      - title
    properties:
      detail:
        description: More detailed, human-readable, optional explanation of the error
        type: string
        example: User is lacking permission to access this resource
      status:
        description: HTTP status code returned for the error
        type: integer
        format: int64
        maximum: 599
        minimum: 100
        x-go-name: Code
        example: 403
      title:
        description: Short, human-readable description of the error
        type: string
        example: Forbidden
      type:
        description: Type of error returned, should be used for client-side error handling
        type: string
        example: generic

  publicHttpValidationError:
    type: object
    required:
      - validationErrors
    allOf:
      - $ref: "#/definitions/publicHttpError"
    properties:
      validationErrors:
        description: List of errors received while validating payload against schema
        type: array
        items:
          $ref: "#/definitions/httpValidationErrorDetail"
