// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateSubTopicRequest update sub topic request
//
// swagger:model updateSubTopicRequest
type UpdateSubTopicRequest struct {

	// name
	Name string `json:"name,omitempty"`

	// topic
	Topic *UpdateSubTopicRequestTopic `json:"topic,omitempty"`
}

// Validate validates this update sub topic request
func (m *UpdateSubTopicRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTopic(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateSubTopicRequest) validateTopic(formats strfmt.Registry) error {
	if swag.IsZero(m.Topic) { // not required
		return nil
	}

	if m.Topic != nil {
		if err := m.Topic.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("topic")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("topic")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update sub topic request based on the context it is used
func (m *UpdateSubTopicRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTopic(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateSubTopicRequest) contextValidateTopic(ctx context.Context, formats strfmt.Registry) error {

	if m.Topic != nil {

		if swag.IsZero(m.Topic) { // not required
			return nil
		}

		if err := m.Topic.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("topic")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("topic")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateSubTopicRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateSubTopicRequest) UnmarshalBinary(b []byte) error {
	var res UpdateSubTopicRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateSubTopicRequestTopic update sub topic request topic
//
// swagger:model UpdateSubTopicRequestTopic
type UpdateSubTopicRequestTopic struct {

	// id
	ID int64 `json:"id,omitempty"`
}

// Validate validates this update sub topic request topic
func (m *UpdateSubTopicRequestTopic) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update sub topic request topic based on context it is used
func (m *UpdateSubTopicRequestTopic) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateSubTopicRequestTopic) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateSubTopicRequestTopic) UnmarshalBinary(b []byte) error {
	var res UpdateSubTopicRequestTopic
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
