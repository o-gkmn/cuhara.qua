// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// SubTopic is an object representing the database table.
type SubTopic struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	TopicID   int       `boil:"topic_id" json:"topic_id" toml:"topic_id" yaml:"topic_id"`
	TenantID  int       `boil:"tenant_id" json:"tenant_id" toml:"tenant_id" yaml:"tenant_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *subTopicR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L subTopicL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SubTopicColumns = struct {
	ID        string
	Name      string
	TopicID   string
	TenantID  string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Name:      "name",
	TopicID:   "topic_id",
	TenantID:  "tenant_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var SubTopicTableColumns = struct {
	ID        string
	Name      string
	TopicID   string
	TenantID  string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "sub_topics.id",
	Name:      "sub_topics.name",
	TopicID:   "sub_topics.topic_id",
	TenantID:  "sub_topics.tenant_id",
	CreatedAt: "sub_topics.created_at",
	UpdatedAt: "sub_topics.updated_at",
}

// Generated where

var SubTopicWhere = struct {
	ID        whereHelperint
	Name      whereHelperstring
	TopicID   whereHelperint
	TenantID  whereHelperint
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperint{field: "\"sub_topics\".\"id\""},
	Name:      whereHelperstring{field: "\"sub_topics\".\"name\""},
	TopicID:   whereHelperint{field: "\"sub_topics\".\"topic_id\""},
	TenantID:  whereHelperint{field: "\"sub_topics\".\"tenant_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"sub_topics\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"sub_topics\".\"updated_at\""},
}

// SubTopicRels is where relationship names are stored.
var SubTopicRels = struct {
	Tenant        string
	Topic         string
	SubtopicPosts string
}{
	Tenant:        "Tenant",
	Topic:         "Topic",
	SubtopicPosts: "SubtopicPosts",
}

// subTopicR is where relationships are stored.
type subTopicR struct {
	Tenant        *Tenant   `boil:"Tenant" json:"Tenant" toml:"Tenant" yaml:"Tenant"`
	Topic         *Topic    `boil:"Topic" json:"Topic" toml:"Topic" yaml:"Topic"`
	SubtopicPosts PostSlice `boil:"SubtopicPosts" json:"SubtopicPosts" toml:"SubtopicPosts" yaml:"SubtopicPosts"`
}

// NewStruct creates a new relationship struct
func (*subTopicR) NewStruct() *subTopicR {
	return &subTopicR{}
}

func (o *SubTopic) GetTenant() *Tenant {
	if o == nil {
		return nil
	}

	return o.R.GetTenant()
}

func (r *subTopicR) GetTenant() *Tenant {
	if r == nil {
		return nil
	}

	return r.Tenant
}

func (o *SubTopic) GetTopic() *Topic {
	if o == nil {
		return nil
	}

	return o.R.GetTopic()
}

func (r *subTopicR) GetTopic() *Topic {
	if r == nil {
		return nil
	}

	return r.Topic
}

func (o *SubTopic) GetSubtopicPosts() PostSlice {
	if o == nil {
		return nil
	}

	return o.R.GetSubtopicPosts()
}

func (r *subTopicR) GetSubtopicPosts() PostSlice {
	if r == nil {
		return nil
	}

	return r.SubtopicPosts
}

// subTopicL is where Load methods for each relationship are stored.
type subTopicL struct{}

var (
	subTopicAllColumns            = []string{"id", "name", "topic_id", "tenant_id", "created_at", "updated_at"}
	subTopicColumnsWithoutDefault = []string{"name", "topic_id", "tenant_id"}
	subTopicColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	subTopicPrimaryKeyColumns     = []string{"id"}
	subTopicGeneratedColumns      = []string{}
)

type (
	// SubTopicSlice is an alias for a slice of pointers to SubTopic.
	// This should almost always be used instead of []SubTopic.
	SubTopicSlice []*SubTopic
	// SubTopicHook is the signature for custom SubTopic hook methods
	SubTopicHook func(context.Context, boil.ContextExecutor, *SubTopic) error

	subTopicQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	subTopicType                 = reflect.TypeOf(&SubTopic{})
	subTopicMapping              = queries.MakeStructMapping(subTopicType)
	subTopicPrimaryKeyMapping, _ = queries.BindMapping(subTopicType, subTopicMapping, subTopicPrimaryKeyColumns)
	subTopicInsertCacheMut       sync.RWMutex
	subTopicInsertCache          = make(map[string]insertCache)
	subTopicUpdateCacheMut       sync.RWMutex
	subTopicUpdateCache          = make(map[string]updateCache)
	subTopicUpsertCacheMut       sync.RWMutex
	subTopicUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var subTopicAfterSelectMu sync.Mutex
var subTopicAfterSelectHooks []SubTopicHook

var subTopicBeforeInsertMu sync.Mutex
var subTopicBeforeInsertHooks []SubTopicHook
var subTopicAfterInsertMu sync.Mutex
var subTopicAfterInsertHooks []SubTopicHook

var subTopicBeforeUpdateMu sync.Mutex
var subTopicBeforeUpdateHooks []SubTopicHook
var subTopicAfterUpdateMu sync.Mutex
var subTopicAfterUpdateHooks []SubTopicHook

var subTopicBeforeDeleteMu sync.Mutex
var subTopicBeforeDeleteHooks []SubTopicHook
var subTopicAfterDeleteMu sync.Mutex
var subTopicAfterDeleteHooks []SubTopicHook

var subTopicBeforeUpsertMu sync.Mutex
var subTopicBeforeUpsertHooks []SubTopicHook
var subTopicAfterUpsertMu sync.Mutex
var subTopicAfterUpsertHooks []SubTopicHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SubTopic) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subTopicAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SubTopic) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subTopicBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SubTopic) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subTopicAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SubTopic) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subTopicBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SubTopic) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subTopicAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SubTopic) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subTopicBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SubTopic) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subTopicAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SubTopic) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subTopicBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SubTopic) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subTopicAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSubTopicHook registers your hook function for all future operations.
func AddSubTopicHook(hookPoint boil.HookPoint, subTopicHook SubTopicHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		subTopicAfterSelectMu.Lock()
		subTopicAfterSelectHooks = append(subTopicAfterSelectHooks, subTopicHook)
		subTopicAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		subTopicBeforeInsertMu.Lock()
		subTopicBeforeInsertHooks = append(subTopicBeforeInsertHooks, subTopicHook)
		subTopicBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		subTopicAfterInsertMu.Lock()
		subTopicAfterInsertHooks = append(subTopicAfterInsertHooks, subTopicHook)
		subTopicAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		subTopicBeforeUpdateMu.Lock()
		subTopicBeforeUpdateHooks = append(subTopicBeforeUpdateHooks, subTopicHook)
		subTopicBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		subTopicAfterUpdateMu.Lock()
		subTopicAfterUpdateHooks = append(subTopicAfterUpdateHooks, subTopicHook)
		subTopicAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		subTopicBeforeDeleteMu.Lock()
		subTopicBeforeDeleteHooks = append(subTopicBeforeDeleteHooks, subTopicHook)
		subTopicBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		subTopicAfterDeleteMu.Lock()
		subTopicAfterDeleteHooks = append(subTopicAfterDeleteHooks, subTopicHook)
		subTopicAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		subTopicBeforeUpsertMu.Lock()
		subTopicBeforeUpsertHooks = append(subTopicBeforeUpsertHooks, subTopicHook)
		subTopicBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		subTopicAfterUpsertMu.Lock()
		subTopicAfterUpsertHooks = append(subTopicAfterUpsertHooks, subTopicHook)
		subTopicAfterUpsertMu.Unlock()
	}
}

// One returns a single subTopic record from the query.
func (q subTopicQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SubTopic, error) {
	o := &SubTopic{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sub_topics")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SubTopic records from the query.
func (q subTopicQuery) All(ctx context.Context, exec boil.ContextExecutor) (SubTopicSlice, error) {
	var o []*SubTopic

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SubTopic slice")
	}

	if len(subTopicAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SubTopic records in the query.
func (q subTopicQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sub_topics rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q subTopicQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sub_topics exists")
	}

	return count > 0, nil
}

// Tenant pointed to by the foreign key.
func (o *SubTopic) Tenant(mods ...qm.QueryMod) tenantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TenantID),
	}

	queryMods = append(queryMods, mods...)

	return Tenants(queryMods...)
}

// Topic pointed to by the foreign key.
func (o *SubTopic) Topic(mods ...qm.QueryMod) topicQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TopicID),
	}

	queryMods = append(queryMods, mods...)

	return Topics(queryMods...)
}

// SubtopicPosts retrieves all the post's Posts with an executor via subtopic_id column.
func (o *SubTopic) SubtopicPosts(mods ...qm.QueryMod) postQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"posts\".\"subtopic_id\"=?", o.ID),
	)

	return Posts(queryMods...)
}

// LoadTenant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (subTopicL) LoadTenant(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubTopic interface{}, mods queries.Applicator) error {
	var slice []*SubTopic
	var object *SubTopic

	if singular {
		var ok bool
		object, ok = maybeSubTopic.(*SubTopic)
		if !ok {
			object = new(SubTopic)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSubTopic)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSubTopic))
			}
		}
	} else {
		s, ok := maybeSubTopic.(*[]*SubTopic)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSubTopic)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSubTopic))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &subTopicR{}
		}
		args[object.TenantID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subTopicR{}
			}

			args[obj.TenantID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tenants`),
		qm.WhereIn(`tenants.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tenant")
	}

	var resultSlice []*Tenant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tenant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tenants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tenants")
	}

	if len(tenantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tenant = foreign
		if foreign.R == nil {
			foreign.R = &tenantR{}
		}
		foreign.R.SubTopics = append(foreign.R.SubTopics, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TenantID == foreign.ID {
				local.R.Tenant = foreign
				if foreign.R == nil {
					foreign.R = &tenantR{}
				}
				foreign.R.SubTopics = append(foreign.R.SubTopics, local)
				break
			}
		}
	}

	return nil
}

// LoadTopic allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (subTopicL) LoadTopic(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubTopic interface{}, mods queries.Applicator) error {
	var slice []*SubTopic
	var object *SubTopic

	if singular {
		var ok bool
		object, ok = maybeSubTopic.(*SubTopic)
		if !ok {
			object = new(SubTopic)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSubTopic)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSubTopic))
			}
		}
	} else {
		s, ok := maybeSubTopic.(*[]*SubTopic)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSubTopic)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSubTopic))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &subTopicR{}
		}
		args[object.TopicID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subTopicR{}
			}

			args[obj.TopicID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`topics`),
		qm.WhereIn(`topics.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Topic")
	}

	var resultSlice []*Topic
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Topic")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for topics")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for topics")
	}

	if len(topicAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Topic = foreign
		if foreign.R == nil {
			foreign.R = &topicR{}
		}
		foreign.R.SubTopics = append(foreign.R.SubTopics, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TopicID == foreign.ID {
				local.R.Topic = foreign
				if foreign.R == nil {
					foreign.R = &topicR{}
				}
				foreign.R.SubTopics = append(foreign.R.SubTopics, local)
				break
			}
		}
	}

	return nil
}

// LoadSubtopicPosts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (subTopicL) LoadSubtopicPosts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubTopic interface{}, mods queries.Applicator) error {
	var slice []*SubTopic
	var object *SubTopic

	if singular {
		var ok bool
		object, ok = maybeSubTopic.(*SubTopic)
		if !ok {
			object = new(SubTopic)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSubTopic)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSubTopic))
			}
		}
	} else {
		s, ok := maybeSubTopic.(*[]*SubTopic)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSubTopic)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSubTopic))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &subTopicR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subTopicR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`posts`),
		qm.WhereIn(`posts.subtopic_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load posts")
	}

	var resultSlice []*Post
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice posts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on posts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for posts")
	}

	if len(postAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SubtopicPosts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &postR{}
			}
			foreign.R.Subtopic = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SubtopicID {
				local.R.SubtopicPosts = append(local.R.SubtopicPosts, foreign)
				if foreign.R == nil {
					foreign.R = &postR{}
				}
				foreign.R.Subtopic = local
				break
			}
		}
	}

	return nil
}

// SetTenant of the subTopic to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.SubTopics.
func (o *SubTopic) SetTenant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tenant) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sub_topics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
		strmangle.WhereClause("\"", "\"", 2, subTopicPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TenantID = related.ID
	if o.R == nil {
		o.R = &subTopicR{
			Tenant: related,
		}
	} else {
		o.R.Tenant = related
	}

	if related.R == nil {
		related.R = &tenantR{
			SubTopics: SubTopicSlice{o},
		}
	} else {
		related.R.SubTopics = append(related.R.SubTopics, o)
	}

	return nil
}

// SetTopic of the subTopic to the related item.
// Sets o.R.Topic to related.
// Adds o to related.R.SubTopics.
func (o *SubTopic) SetTopic(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Topic) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sub_topics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"topic_id"}),
		strmangle.WhereClause("\"", "\"", 2, subTopicPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TopicID = related.ID
	if o.R == nil {
		o.R = &subTopicR{
			Topic: related,
		}
	} else {
		o.R.Topic = related
	}

	if related.R == nil {
		related.R = &topicR{
			SubTopics: SubTopicSlice{o},
		}
	} else {
		related.R.SubTopics = append(related.R.SubTopics, o)
	}

	return nil
}

// AddSubtopicPosts adds the given related objects to the existing relationships
// of the sub_topic, optionally inserting them as new records.
// Appends related to o.R.SubtopicPosts.
// Sets related.R.Subtopic appropriately.
func (o *SubTopic) AddSubtopicPosts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Post) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SubtopicID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"posts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"subtopic_id"}),
				strmangle.WhereClause("\"", "\"", 2, postPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SubtopicID = o.ID
		}
	}

	if o.R == nil {
		o.R = &subTopicR{
			SubtopicPosts: related,
		}
	} else {
		o.R.SubtopicPosts = append(o.R.SubtopicPosts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &postR{
				Subtopic: o,
			}
		} else {
			rel.R.Subtopic = o
		}
	}
	return nil
}

// SubTopics retrieves all the records using an executor.
func SubTopics(mods ...qm.QueryMod) subTopicQuery {
	mods = append(mods, qm.From("\"sub_topics\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sub_topics\".*"})
	}

	return subTopicQuery{q}
}

// FindSubTopic retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSubTopic(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SubTopic, error) {
	subTopicObj := &SubTopic{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sub_topics\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, subTopicObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sub_topics")
	}

	if err = subTopicObj.doAfterSelectHooks(ctx, exec); err != nil {
		return subTopicObj, err
	}

	return subTopicObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SubTopic) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sub_topics provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(subTopicColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	subTopicInsertCacheMut.RLock()
	cache, cached := subTopicInsertCache[key]
	subTopicInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			subTopicAllColumns,
			subTopicColumnsWithDefault,
			subTopicColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(subTopicType, subTopicMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(subTopicType, subTopicMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sub_topics\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sub_topics\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sub_topics")
	}

	if !cached {
		subTopicInsertCacheMut.Lock()
		subTopicInsertCache[key] = cache
		subTopicInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SubTopic.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SubTopic) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	subTopicUpdateCacheMut.RLock()
	cache, cached := subTopicUpdateCache[key]
	subTopicUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			subTopicAllColumns,
			subTopicPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sub_topics, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sub_topics\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, subTopicPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(subTopicType, subTopicMapping, append(wl, subTopicPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sub_topics row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sub_topics")
	}

	if !cached {
		subTopicUpdateCacheMut.Lock()
		subTopicUpdateCache[key] = cache
		subTopicUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q subTopicQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sub_topics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sub_topics")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SubTopicSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subTopicPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sub_topics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, subTopicPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in subTopic slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all subTopic")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SubTopic) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no sub_topics provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(subTopicColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	subTopicUpsertCacheMut.RLock()
	cache, cached := subTopicUpsertCache[key]
	subTopicUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			subTopicAllColumns,
			subTopicColumnsWithDefault,
			subTopicColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			subTopicAllColumns,
			subTopicPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert sub_topics, could not build update column list")
		}

		ret := strmangle.SetComplement(subTopicAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(subTopicPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert sub_topics, could not build conflict column list")
			}

			conflict = make([]string, len(subTopicPrimaryKeyColumns))
			copy(conflict, subTopicPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sub_topics\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(subTopicType, subTopicMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(subTopicType, subTopicMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert sub_topics")
	}

	if !cached {
		subTopicUpsertCacheMut.Lock()
		subTopicUpsertCache[key] = cache
		subTopicUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SubTopic record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SubTopic) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SubTopic provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), subTopicPrimaryKeyMapping)
	sql := "DELETE FROM \"sub_topics\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sub_topics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sub_topics")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q subTopicQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no subTopicQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sub_topics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sub_topics")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SubTopicSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(subTopicBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subTopicPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sub_topics\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, subTopicPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from subTopic slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sub_topics")
	}

	if len(subTopicAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SubTopic) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSubTopic(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SubTopicSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SubTopicSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subTopicPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sub_topics\".* FROM \"sub_topics\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, subTopicPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SubTopicSlice")
	}

	*o = slice

	return nil
}

// SubTopicExists checks if the SubTopic row exists.
func SubTopicExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sub_topics\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sub_topics exists")
	}

	return exists, nil
}

// Exists checks if the SubTopic row exists.
func (o *SubTopic) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SubTopicExists(ctx, exec, o.ID)
}
